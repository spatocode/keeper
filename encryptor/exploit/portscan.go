package exploit

import (
	"net"
	"time"
	"strings"
	"sync"
	"context"
	"fmt"

	"golang.org/x/sync/semaphore"
)

type PortScanner struct {
	ip		string
	lock	*semaphore.Weighted
}

func Scanner() {
	timeout := 500*time.Millisecond
	ps := &PortScanner {
		ip: 	"127.0.0.1",
		lock:	semaphore.NewWeighted(256),
	}

	var wg sync.WaitGroup
	defer wg.Wait()
	ports := []int{139, 445}

	for _, port := range ports {
		ps.lock.Acquire(context.TODO(), 1)
		wg.Add(1)
		go func(port int) {
			defer ps.lock.Release(1)
			defer wg.Done()
			ScanPort(ps.ip, port, timeout)
		}(port)
	}
}

func ScanPort(ip string, port int, timeout time.Duration) {
	target := fmt.Sprintf("%s:%d", ip, port)

	conn, err := net.DialTimeout("tcp", target, timeout)
	if err != nil {
		if strings.Contains(err.Error(), "too many open files") {
			fmt.Println("Sleep")
			time.Sleep(timeout)
			ScanPort(ip, port, timeout)
		} else {
			fmt.Println(port, "closed")
		}
		return
	}

	conn.Close()
	fmt.Println(port, "open")
}